Metadata-Version: 2.4
Name: qualia-core
Version: 0.1.0
Summary: Framework bare metal para análise qualitativa
Home-page: https://github.com/mrlnlms/qualia
Author: Seu Nome
Author-email: seu.email@example.com
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: click>=8.0
Requires-Dist: rich>=13.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: pydantic>=2.0
Requires-Dist: nltk>=3.8
Requires-Dist: numpy
Requires-Dist: pandas
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# 🔬 Qualia Core

Um framework bare metal para transformação de dados qualitativos em insights quantificados, que inicia vazio e cresce organicamente através de plugins.

> **Qualia** (do latim "qualis") - experiências subjetivas qualitativas que este framework transforma em métricas objetivas para pesquisa mixed methods.

## 🎯 O Problema que Resolvemos

**Situação Atual**: 
- "Cadê aquele script de limpeza que fiz 6 meses atrás?"
- Procura em várias pastas: `lda_test_v3_final_FINAL.py`
- "Qual ambiente virtual era? Precisa instalar sklearn..."
- 30min debugando conflitos de versão
- Parâmetros diferentes da última vez

**Com Qualia**:
```bash
$ qualia analyze documento.txt --analyzer="lda"
✅ Pronto! (usa configuração que funcionou antes)
```

## 🚀 Filosofia Core

### Bare Metal = Orquestração Pura
- Core NÃO implementa features, apenas orquestra
- Core não conhece NENHUM tipo de análise
- Toda inteligência vem dos plugins
- **Zero conhecimento de domínio** no Core

### Scripts → Plugins Permanentes
Seus scripts úteis (limpeza Teams/Meet, preprocessamento) viram plugins permanentes:
```bash
# Antes: procurar script perdido
# Agora:
$ qualia process transcript.txt --plugin="teams-cleaner"
✅ Sempre disponível com mesma config!
```

### Configuration as Methodology
- Cada parâmetro tem justificativa científica
- Configurações são assets reutilizáveis
- "tese_diabetes_2024" vira receita permanente

## 🏗️ Arquitetura

```
qualia/
├── core/              # Engine bare metal
├── document_lab/      # Preparação de documentos
├── para_meta/         # Parametrização + metadados
├── quali_metrics/     # Configurações metodológicas
└── visual_engine/     # Visualizações

plugins/               # Seus scripts viram plugins aqui!
├── word_frequency/    # Exemplo: analyzer
├── teams_cleaner/     # Exemplo: seu script como plugin
└── your_plugin/       # Adicione os seus!
```

## 🚀 Quickstart

```bash
# 1. Clonar e instalar
git clone https://github.com/mrlnlms/qualia.git
cd qualia
python3 -m venv venv
source venv/bin/activate
pip install -e .

# 2. Ver plugins disponíveis
qualia list

# 3. Analisar um documento
qualia analyze seu_documento.txt --plugin word_frequency

# 4. Criar visualização (Python)
python -c "
from plugins.wordcloud_viz import WordCloudVisualizer
import json
with open('results/freq.json') as f: data = json.load(f)
WordCloudVisualizer().render(data, {}, 'wordcloud.png')
"

# 5. Ver resultado
open wordcloud.png
```

## 🎨 Como Funciona

### 1. Core Completamente Vazio
```python
from qualia.core import QualiaCore

# Core inicia sem conhecer NADA
core = QualiaCore()
print(len(core.plugins))  # 0 - vazio!

# Descobre plugins disponíveis
core.discover_plugins()
print(len(core.plugins))  # 4 - descobriu word_frequency, teams_cleaner, wordcloud_viz, frequency_chart
```

### 2. Análise de Frequência
```bash
# Análise básica
qualia analyze documento.txt --plugin word_frequency

# Com parâmetros customizados
qualia analyze documento.txt -p word_frequency \
  -P min_word_length=4 \
  -P remove_stopwords=true \
  -P language=portuguese
```

### 3. Limpeza de Transcrições
```bash
# Limpar transcrição do Teams
qualia process transcript.txt --plugin teams_cleaner \
  --save-as transcript_limpo.txt
```

### 4. Pipeline Completo
```bash
# Executar pipeline de análise
qualia pipeline documento.txt \
  --config configs/pipelines/full_visual.yaml \
  --output-dir results/
```

### 5. Visualizações (via Python por enquanto)
```python
from plugins.wordcloud_viz import WordCloudVisualizer
from plugins.frequency_chart import FrequencyChartVisualizer

# Criar nuvem de palavras
wc = WordCloudVisualizer()
wc.render(data, {"colormap": "viridis"}, "wordcloud.png")

# Criar gráfico interativo
fc = FrequencyChartVisualizer()
fc.render(data, {"chart_type": "horizontal_bar"}, "chart.html")
```

## 🧪 Status: Alpha

Framework funcional com plugins de análise e visualização.

### ✅ Implementado
- [x] Core bare metal funcional
- [x] Sistema de plugins com auto-descoberta
- [x] Resolução de dependências automática
- [x] Cache inteligente por análise
- [x] CLI completa com comandos ricos
- [x] 4 Plugins funcionais:
  - **Analyzers**: `word_frequency`, `teams_cleaner`
  - **Visualizers**: `wordcloud_viz`, `frequency_chart`
- [x] Pipelines de análise configuráveis
- [x] Visualizações interativas (HTML) e estáticas (PNG)
- [x] Instalação via pip (`pip install -e .`)

### 🚧 Em Desenvolvimento
- [ ] Comando `visualize` na CLI
- [ ] Dashboard composer
- [ ] Sentiment analyzer
- [ ] API REST
- [ ] Plugin Obsidian
- [ ] Testes unitários

## 📊 Plugins Disponíveis

### Analyzers
- **word_frequency**: Análise de frequência de palavras com suporte a múltiplos idiomas
- **teams_cleaner**: Limpeza e estruturação de transcrições do Microsoft Teams

### Visualizers  
- **wordcloud_viz**: Gera nuvens de palavras em PNG, SVG ou HTML interativo
- **frequency_chart**: Cria gráficos de barras, linhas e área (Plotly/Matplotlib)

### Em Desenvolvimento
- **sentiment_analyzer**: Análise de sentimentos (TextBlob/VADER)
- **lda_analyzer**: Topic modeling com LDA
- **dashboard_composer**: Combina múltiplas visualizações

## 📚 Documentação

- [Decisões Técnicas](docs/technical_decisions.md) - Arquitetura e aprendizados
- [Plugin Development](docs/plugin_guide.md) - Como criar plugins
- [API Reference](docs/api.md) - Documentação completa

## 🔗 Relacionado

- [transcript-analyzer](https://github.com/mrlnlms/transcript-analyser) - Sistema atual em produção
- Este projeto eventualmente substituirá o core do transcript-analyzer

## 📜 Licença

MIT License - Livre para uso acadêmico e comercial.

---

**Visão**: Transformar a análise qualitativa de "procurar scripts perdidos" para "funcionalidade permanente e organizada".
